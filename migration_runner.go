package weeb

import (
	"fmt"
	"os"
	"path/filepath"
	"time"
)

// Migration represents an instance of a migration the migration runner can run
type Migration struct {
	ID   string
	Up   func(app *App) error
	Down func(app *App) error
}

// MigrationRunner represents an instance of a migration runner with it's
// associated app and registered migrations
type MigrationRunner struct {
	app        *App
	migrations []*Migration
}

// NewMigrationRunner creates a MigrationRunner instance
func NewMigrationRunner(app *App) *MigrationRunner {
	return &MigrationRunner{app: app, migrations: []*Migration{}}
}

// Add adds a new migration definition to the MigrationRunner
func (m *MigrationRunner) Add(id string, upFn, downFn func(app *App) error) {
	m.migrations = append(m.migrations, &Migration{ID: id, Up: upFn, Down: downFn})
}

func migrationRunnerTask(app *App, args []string) error {
	if len(args) == 0 {
		return migrationRunnerTaskHelp(app)
	} else if args[0] == "help" {
		return migrationRunnerTaskHelp(app)
	} else if args[0] == "create" {
		return migrationRunnerTaskCreate(app)
	}
	fmt.Printf("Error: unknown sub-task '%s' for task 'migrate'\n\n", args[0])
	return nil
}

func migrationRunnerTaskHelp(app *App) error {
	fmt.Println("'migrate' task usage:")
	fmt.Println()
	fmt.Println("    up      runs the 'up' part for all pending migrations")
	fmt.Println("    down    runs the 'down' part of the latest migration")
	fmt.Println("    create  creates a new migration file in 'migrations/'")
	fmt.Println()
	return nil
}

func migrationRunnerTaskCreate(app *App) error {
	if err := os.MkdirAll("migrations", os.ModePerm); err != nil {
		return nil
	}

	migrationsPackageFile, err := os.OpenFile(filepath.Join("migrations", "migrations.go"), os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer migrationsPackageFile.Close()
	migrationsPackageFile.Write([]byte(`package migrations

// This is an AUTOGENERATED file, if you edit it, you will loose your changes

import (
  "github.com/kiasaki/weeb"
)

var migrations = []*weeb.Migration{}

func migration(id string, upFn, downFn func(*weeb.App)error) struct{} {
	migrations = append(migrations, &weeb.Migration{ID:id, Up: upFn, Down: downFn})
	return struct{}{}
}

// AddMigrationsToApp adds migrations defined in this package to the given 'App'
func AddMigrationsToApp(app *weeb.App) {
	for _, m := range migrations {
		app.Migrations.Add(m.ID, m.Up, m.Down)
	}
}
`))

	migrationID := time.Now().UTC().Format("20060102150405")
	migrationFileName := migrationID + ".go"
	migrationFile, err := os.OpenFile(filepath.Join("migrations", migrationFileName), os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer migrationFile.Close()
	migrationFile.Write([]byte(fmt.Sprintf(`package migrations

import (
  "github.com/kiasaki/weeb"
)

var _ = migration("%v", up%v, down%v)

func up%v(app *weeb.App) error {
  return app.DB.Exec(`+"`"+`
    CREATE TABLE ...
  `+"`"+`)
}

func down%v(app *weeb.App) error {
  return app.DB.Exec(`+"`"+`
    DROP TABLE ...
  `+"`"+`)
}
`, migrationID, migrationID, migrationID, migrationID, migrationID)))

	fmt.Printf("\nCreated migration file 'migrations/%s'\n\n", migrationFileName)

	return nil
}
